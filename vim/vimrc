" init
set nocompatible
execute pathogen#infect()
set encoding=utf-8
set nomodeline
set noexrc
set secure

" basic functionality
let mapleader = ','
set mouse=a
set autowrite  " autowrite on a bunch of times including :make
set autoread   " autoread when buffer is unchanged
set switchbuf=useopen,usetab

" basic appearence
set title
set number
set relativenumber
set cursorline
set colorcolumn=80,100,120
set scrolloff=3
set sidescrolloff=3
set termguicolors
set background=dark
let g:gruvbox_guisp_fallback = "bg"
colorscheme gruvbox
syntax enable

" extensions
" move up/down using display lines when used without a count
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
" the folliwing was based on https://blog.petrzemek.net/2016/04/06/things-about-vim-i-wish-i-knew-earlier/
" make Y work like C and D
noremap Y y$
" stay in visual mode when indenting
vnoremap < <gv
vnoremap > >gv
" quickly select the text that was just pasted
noremap gV `[v`]
" easily replace the current word and all its occurrences
nnoremap <Leader>rc :%s/\<<C-r><C-w>\>/
vnoremap <Leader>rc y:%s/<C-r>"/

" utilities
" make mappings
noremap <leader>m <esc>:make!<cr>
noremap <leader><leader>m <esc>:make<cr>
" previous and current working dir
nnoremap <leader>d :lcd -<cr>
nnoremap <leader><leader>d :cd -<cr>
nnoremap <leader>c :lcd %:p:h<cr>
nnoremap <leader><leader>c :cd %:p:h<cr>
" shell
nnoremap <leader>z :sh<cr>
" autocmd BufEnter * lcd %:p:h  " disabled because it was breaking Gdiff
" trim trailing whitespace
nnoremap <leader>Trim :%s/\s\+$//<cr>
" like :only, but center it between 2 empty windows
nnoremap <leader>o :only<cr>:vnew<cr>:vnew<cr><C-W>R<C-W>h
" last command
noremap <leader><cr> :<c-p>

" searches
set incsearch
set ignorecase
set smartcase  " /foo matches FOO and fOo; /FOO only matches FOO
set hlsearch   " highlight searh matches
noremap <leader>l :nohlsearch<cr>

" spellchecking
nnoremap <leader>sl :setlocal nospell<cr>
nnoremap <leader>se :setlocal spell spelllang=en<cr>
nnoremap <leader>sp :setlocal spell spelllang=pt_br<cr>
nnoremap <leader>sf :setlocal spell spelllang=fr<cr>
autocmd FileType gitcommit setlocal spell
autocmd FileType markdown setlocal spell

" indentation
filetype plugin indent on
set autoindent  " autoindenting always on
set cinoptions+=:0,#0s  " don't indent switch cases, don't threat # as special
set cinkeys-=0#  " don't thread # as special
set noexpandtab shiftwidth=8 softtabstop=8 tabstop=8 list  " use kernel style

" haxe: vaxe
let g:vaxe_prefer_first_in_directory = 0
let g:vaxe_cache_server = 1
let g:vaxe_cache_server_port = 6000
let g:vaxe_cache_server_autostart = 1
noremap <leader>hp :call vaxe#ProjectHxml()<cr>
noremap <leader>hd :call vaxe#DefaultHxml()<cr>
noremap <leader>hi <esc>:call vaxe#ImportClass()<cr>
noremap <leader>ht <esc>:call vaxe#Ctags()<cr>
nnoremap <leader>hr :! systemctl --user restart haxe<cr>
" haxe: tcomment
if !exists("g:tcommentBlockHx")  " Based on g:tcommentBlockC
    let g:tcommentBlockHx = {
                \ 'commentstring': '/*%s*/',
                \ 'middle': '    ',
                \ 'rxbeg': '\*\+',
                \ 'rxend': '',
                \ 'rxmid': '',
                \ 'replacements': g:tcomment#replacements_c
                \ }
endif
call tcomment#DefineType('haxe', '// %s')
call tcomment#DefineType('haxe_inline', g:tcommentInlineC)
call tcomment#DefineType('haxe_block', g:tcommentBlockHx)
" haxe: tink template files
autocmd BufNewFile,BufRead *.tt set filetype=tinktemplate
autocmd FileType haxe setlocal textwidth=100
call tcomment#DefineType('tinktemplate', '(:* %s *:)')

" completion
set completeopt=preview
" completion_<c-y>/<c-e> additionally close the preview window
inoremap <expr> <c-e> pumvisible() ? "\<c-e>\<esc>:pc<cr>a" : "\<c-e>"
inoremap <expr> <c-y> pumvisible() ? "\<c-y>\<esc>:pc<cr>a" : "\<c-y>"
" imap <expr> <esc> pumvisible() ? "\<c-e><esc>" : "\<esc>"
imap <expr> <c-c> pumvisible() ? "\<c-e><esc>" : "\<c-c>"
" completion_<c-space> opens (<c-x><c-o>) or aborts (<c-e>) the omnicompletion
imap <expr> <c-@> pumvisible() ? "\<c-e>" : "\<c-x>\<c-o>"
" completion_<tab> (if pumvisble) accepts the omnicompletion (<c-y>)
imap <expr> <tab> pumvisible() ? "\<c-y>" : "\<tab>"
" <c-@> (in normal mode) opens the omnicompletion
nmap <expr> <c-@> "a\<c-@>"
" <c-space> to <c-@> equivalence
imap <c-space> <c-@>
nmap <c-space> <c-@>

" other plugin settings
let g:ranger_replace_netrw = 1

" fix airline issues with fonts
" assumes the terminal is using a powerline font like Hack
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.whitespace = 'Îž'
